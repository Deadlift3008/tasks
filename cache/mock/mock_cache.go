// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDB) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDBMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDB)(nil).Get), key)
}

// MockCacheI is a mock of CacheI interface.
type MockCacheI struct {
	ctrl     *gomock.Controller
	recorder *MockCacheIMockRecorder
}

// MockCacheIMockRecorder is the mock recorder for MockCacheI.
type MockCacheIMockRecorder struct {
	mock *MockCacheI
}

// NewMockCacheI creates a new mock instance.
func NewMockCacheI(ctrl *gomock.Controller) *MockCacheI {
	mock := &MockCacheI{ctrl: ctrl}
	mock.recorder = &MockCacheIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheI) EXPECT() *MockCacheIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCacheI) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheIMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheI)(nil).Get), key)
}

// KeysInCache mocks base method.
func (m *MockCacheI) KeysInCache() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeysInCache")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeysInCache indicates an expected call of KeysInCache.
func (mr *MockCacheIMockRecorder) KeysInCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeysInCache", reflect.TypeOf((*MockCacheI)(nil).KeysInCache))
}

// MGet mocks base method.
func (m *MockCacheI) MGet(keys []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", keys)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockCacheIMockRecorder) MGet(keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockCacheI)(nil).MGet), keys)
}
